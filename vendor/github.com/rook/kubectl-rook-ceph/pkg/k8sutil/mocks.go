// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rook/kubectl-rook-ceph/pkg/k8sutil (interfaces: ClientsetsInterface)

// Package k8sutil is a generated GoMock package.
package k8sutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	types "k8s.io/apimachinery/pkg/types"
)

// MockClientsetsInterface is a mock of ClientsetsInterface interface.
type MockClientsetsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetsInterfaceMockRecorder
}

// MockClientsetsInterfaceMockRecorder is the mock recorder for MockClientsetsInterface.
type MockClientsetsInterfaceMockRecorder struct {
	mock *MockClientsetsInterface
}

// NewMockClientsetsInterface creates a new mock instance.
func NewMockClientsetsInterface(ctrl *gomock.Controller) *MockClientsetsInterface {
	mock := &MockClientsetsInterface{ctrl: ctrl}
	mock.recorder = &MockClientsetsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientsetsInterface) EXPECT() *MockClientsetsInterfaceMockRecorder {
	return m.recorder
}

// CreateResourcesDynamically mocks base method.
func (m *MockClientsetsInterface) CreateResourcesDynamically(arg0 context.Context, arg1, arg2, arg3 string, arg4 *unstructured.Unstructured, arg5 string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcesDynamically", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcesDynamically indicates an expected call of CreateResourcesDynamically.
func (mr *MockClientsetsInterfaceMockRecorder) CreateResourcesDynamically(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcesDynamically", reflect.TypeOf((*MockClientsetsInterface)(nil).CreateResourcesDynamically), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteResourcesDynamically mocks base method.
func (m *MockClientsetsInterface) DeleteResourcesDynamically(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcesDynamically", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourcesDynamically indicates an expected call of DeleteResourcesDynamically.
func (mr *MockClientsetsInterfaceMockRecorder) DeleteResourcesDynamically(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcesDynamically", reflect.TypeOf((*MockClientsetsInterface)(nil).DeleteResourcesDynamically), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetResourcesDynamically mocks base method.
func (m *MockClientsetsInterface) GetResourcesDynamically(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesDynamically", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesDynamically indicates an expected call of GetResourcesDynamically.
func (mr *MockClientsetsInterfaceMockRecorder) GetResourcesDynamically(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesDynamically", reflect.TypeOf((*MockClientsetsInterface)(nil).GetResourcesDynamically), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListResourcesDynamically mocks base method.
func (m *MockClientsetsInterface) ListResourcesDynamically(arg0 context.Context, arg1, arg2, arg3, arg4 string) ([]unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesDynamically", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesDynamically indicates an expected call of ListResourcesDynamically.
func (mr *MockClientsetsInterfaceMockRecorder) ListResourcesDynamically(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesDynamically", reflect.TypeOf((*MockClientsetsInterface)(nil).ListResourcesDynamically), arg0, arg1, arg2, arg3, arg4)
}

// PatchResourcesDynamically mocks base method.
func (m *MockClientsetsInterface) PatchResourcesDynamically(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 types.PatchType, arg7 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourcesDynamically", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResourcesDynamically indicates an expected call of PatchResourcesDynamically.
func (mr *MockClientsetsInterfaceMockRecorder) PatchResourcesDynamically(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourcesDynamically", reflect.TypeOf((*MockClientsetsInterface)(nil).PatchResourcesDynamically), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
